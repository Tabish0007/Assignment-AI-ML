import cv2
import pytesseract

# Load monitor template and handle error
template = cv2.imread('monitor_template.jpg')
if template is None:
    print("Error loading template image")
    exit()
    
# Resize template    
template = cv2.resize(template, (600, int(600*template.shape[0]/template.shape[1])))

# Initialize Tesseract OCR
pytesseract.pytesseract.tesseract_cmd = r'/path/to/tesseract' 

# Start video capture at 640x480 resolution
cap = cv2.VideoCapture(0)
cap.set(cv2.CAP_PROP_FRAME_WIDTH, 640) 
cap.set(cv2.CAP_PROP_FRAME_HEIGHT, 480)

while True:

    # Read frame and resize 
    ret, frame = cap.read()
    frame = cv2.resize(frame, (600, int(600*frame.shape[0]/frame.shape[1])))

    # Ensure template channels match frame
    if template.shape[2] != frame.shape[2]:
        template = cv2.cvtColor(template, cv2.COLOR_BGR2GRAY)

    # Match template to detect monitor 
    result = cv2.matchTemplate(frame, template, cv2.TM_CCOEFF_NORMED)
    min_val, max_val, min_loc, max_loc = cv2.minMaxLoc(result)
    
    if max_val > 0.8:
        
        # Define crop coordinates
        y1, y2 = 10, 100  
        x1, x2 = 20, 200
        
        # Crop data areas if monitor detected
        hr_area = frame[y1:y2, x1:x2]
        o2_area = frame[y3:y4, x3:x4]
        
        # OCR to extract values
        hr_text = pytesseract.image_to_string(hr_area)
        o2_text = pytesseract.image_to_string(o2_area)
        
        # Handle OCR failure
        if not hr_text.isnumeric():
            hr_text = 0
            
        if not o2_text.isnumeric():
            o2_text = 0
            
        # Rest of code...
        
# Release resources        
cap.release()
cv2.destroyAllWindows()
